           Mini-projet 2 : Synthèse d'invariant en SMT-LIB
                            fichier RENDU
                     (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 15 décembre 2023 à 22:00

Identité
--------
Nombre de binôme: 36
Nom, prénom 1: Taqui Yannis
Nom, prénom 2: Trognon Julien


Questions sur votre code
------------------------

## **Exercice 2**

### Q0
> Avez-vous testé que `make invariants` s'exécute sans erreurs ou warnings, 
> puis que `./invariants` produit une sortie au format SMT-LIB, 
> et enfin que cette sortie est acceptée par Z3 ?

**Réponse 0 :**

`make invariants` (ou `make` sans argument) ne produit pas 
d'erreurs / warnings et sort un fichier `invariants` qui à l'exécution 
affiche à la suite `p1` et `p2` au format SMT-LIB. L'affichage de `p1` 
correspond exactement au fichier `invariants.smt2` écrit à la main.

Le test sur Z3 de `p1` et `p2` au format SMT-LIB donne les sorties suivantes.

#### p1
```
sat
(
  (define-fun Invar ((x!0 Int) (x!1 Int)) Bool
    (or (and (<= 1 x!0)
             (<= 2 x!0)
             (<= 3 x!0)
             (<= 4 x!0)
             (not (<= 5 x!0))
             (not (= x!1 10))
             (not (= x!1 4))
             (not (= x!1 9))
             (= x!1 0))
        (and (<= 1 x!0)
             (not (<= 2 x!0))
             (not (= x!1 10))
             (not (= x!1 4))
             (= x!1 9))
        (and (<= 1 x!0)
             (<= 2 x!0)
             (<= 3 x!0)
             (not (<= 4 x!0))
             (not (= x!1 10))
             (= x!1 4))
        (and (not (<= 1 x!0)) (= x!1 10))
        (and (<= 1 x!0)
             (<= 2 x!0)
             (not (<= 3 x!0))
             (not (= x!1 10))
             (not (= x!1 4))
             (not (= x!1 9))
             (not (= x!1 0))
             (not (= x!1 2))
             (= x!1 7))))
)
```

#### p2
```
sat
(
  (define-fun k!12 ((x!0 Int)) Int
    (let ((a!1 (ite (<= 13 x!0) (ite (<= 14 x!0) (ite (<= 17 x!0) 17 14) 13) 12)))
    (let ((a!2 (ite (<= 10 x!0) (ite (<= 11 x!0) (ite (<= 12 x!0) a!1 11) 10) 9)))
    (let ((a!3 (ite (<= 7 x!0) (ite (<= 8 x!0) (ite (<= 9 x!0) a!2 8) 7) 6)))
    (let ((a!4 (ite (<= 4 x!0) (ite (<= 5 x!0) (ite (<= 6 x!0) a!3 5) 4) 3)))
    (let ((a!5 (ite (<= 1 x!0) (ite (<= 2 x!0) (ite (<= 3 x!0) a!4 2) 1) 0)))
      (ite (<= 0 x!0) a!5 (- 1))))))))
  (define-fun Invar ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (or (and (= (k!12 x!0) 3) (= (k!12 x!1) 5) (= (k!12 x!2) 11))
        (and (= (k!12 x!0) 5) (= (k!12 x!1) 12) (= (k!12 x!2) 13))
        (and (= (k!12 x!0) 4) (= (k!12 x!1) 8) (= (k!12 x!2) 12))
        (and (= (k!12 x!0) 2) (= (k!12 x!1) 3) (= (k!12 x!2) 10))
        (and (= (k!12 x!0) 1) (= (k!12 x!1) 2) (= (k!12 x!2) 9))
        (and (= (k!12 x!0) 0) (= (k!12 x!1) 2) (= (k!12 x!2) 8))
        (and (= (k!12 x!0) 6) (= (k!12 x!1) 17) (= (k!12 x!2) 14))))
)
```


---

### Q1
> Le type `term` est un type récursif : quel type de fonction OCaml est-il 
> naturel d'utiliser ? 
>
> Quels sont vos cas de base et quelle quantité strictement décroissante
> au cours des appels successifs vous assure la terminaison ?

**Réponse 1 :**

Ocaml étant un langage fonctionnel, son utilisation repose sur la récursivité.
Il est alors naturel d'utiliser des fonctions récursives pour traiter les cas
sur des types récursifs.
Ocaml met à disposition le mot clef `rec` qu'il impose pour écrire 
une fonction récursive.

Ici `term` a deux cas de base (ils permettent de terminer la récursion) 
et deux cas de récursion.
   - Base : `Const` et `Var` sont de type `int`.
   - Récursion : `Add` et ` Mult` prennent en argument deux `term`,
      et ceux-ci doivent contenir des `Const` ou des `Var` 
      à un certain moment.

Le fait que `Add` et `Mult` prennent **deux** `term` pour en contruire **un**
Nous assure la terminaison, que ce soit d'un élément de ce type ou d'une fonction
récursive utilisant ce type.


---

### Q2
> Pour l'implémentation de `str_condition`, quelles sont les fonctions 
> auxiliaires que vous avez utilisées et/ou écrites ? 
> 
> (Par une fonction  auxiliaire, on entend ici soit une fonction d'une 
> bibliothèque, par exemple  des fonctions comme `List.length` ou `List.
> rev_append`, ou une fonction  `aux_str_condition` que vous avez écrite 
> vous-mêmes.) 
> 
> Expliquez en quelques phrases en français comment ces fonctions 
> auxiliaires sont utilisées dans votre implémentation 
> de la fonction `str_condition`.

**Réponse 2 :**

À l'intérieur de `str_condition`, la fonction récursive `aux` permet
de parcourir la liste de `term` en entrée pour contruire à la résolution 
de chaque appel la `string` composée des x1 ... xn en sortie.

Elle est ensuite appelée en concaténant au début `"(Invar"` et `")"`
à la fin pour respecter le format SMT-LIB.


---

### Q3 
> Pour l'implémentation de `str_assert_forall`, quelles sont les fonctions 
> auxiliaires que vous avez utilisées et/ou écrites ? 
> 
> Expliquez en quelques phrases en français comment ces 
> fonctions auxiliaires sont utilisées dans votre implémentation
> de la fonction `str_assert_forall`.

**Réponse 3 :**

À l'intérieur de `str_assert_forall`, la fonction récursive `aux` permet
de construire une `string` composée des x1 ... xn au format 
`(x1 Int) (x2 Int) ... (xn Int)`.

Elle est ensuite appelée dans `str_assert_forall` avec la fonction 
`str_assert` fournie, puis complète les mots clefs, parenthèses et intègre 
`s` pour correspondre au format SMT-LIB.

---

### Q4
> Le langage de programmation WA suppose que les mises à jour 
> des variables `x1`, ..., `xk` sont simultanées : par exemple, 
> si `x1` vaut `1` et x2 vaut `1`, exécuter 
> ```
> x1 = x2 + 1; 
> x2 = x1 + 1;
> ``` 
> résulte en `x1` valant `2` et `x2` valant `2`. 
> 
> En Java, les mises à jour sont séquentielles et le résultat serait 
> que `x1` vaudrait `2` et `x2` vaudrait `3`. 
> 
> Expliquez comment modifier le code pour construire un programme 
> SMT-LIB plus proche de la façon dont les variables sont 
> mises à jour en Java.

**Réponse 4 :**

Pour s'assurer que les valeurs sont mises à jour séquentiellement comme Java, on peut ajouter une autre variable "temp" qui stock la valeur du premier calcul (tmp = x2+1 ),  ensuite on peut mettre a jour x1 et par la suite x2 en utilisant "tmp".

```java
int tmp = x2 + 1;
int x1 = tmp;
int x2 = x1 + 1;
```

Avec cette manière, on repond a la question de sequentielle, comme en java.

---

### Q5
> Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**Réponse 5 :**

Aucune remarque additionnelle.
